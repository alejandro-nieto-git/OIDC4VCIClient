"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const jose = __importStar(require("jose"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const nock_1 = __importDefault(require("nock"));
const __1 = require("..");
const CredentialOfferClient_1 = require("../CredentialOfferClient");
const MetadataMocks_1 = require("./MetadataMocks");
const VciDataFixtures_1 = require("./data/VciDataFixtures");
const partialJWT = 'eyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmN';
const jwt = {
    header: { alg: oid4vci_common_1.Alg.ES256, kid: 'did:example:ebfeb1f712ebc6f1c276e12ec21/keys/1', typ: 'jwt' },
    payload: { iss: 'sphereon:wallet', nonce: 'tZignsnFbp', jti: 'tZignsnFbp223', aud: MetadataMocks_1.IDENTIPROOF_ISSUER_URL },
};
const kid = 'did:example:ebfeb1f712ebc6f1c276e12ec21/keys/1';
let keypair;
function proofOfPossessionCallbackFunction(args, kid) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!args.payload.aud) {
            throw Error('aud required');
        }
        else if (!kid) {
            throw Error('kid required');
        }
        return yield new jose.SignJWT(Object.assign({}, args.payload))
            .setProtectedHeader({ alg: 'ES256' })
            .setIssuedAt()
            .setIssuer(kid)
            .setAudience(args.payload.aud)
            .setExpirationTime('2h')
            .sign(keypair.privateKey);
    });
}
beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
    const { privateKey, publicKey } = yield jose.generateKeyPair('ES256');
    keypair = { publicKey: publicKey, privateKey: privateKey };
}));
beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
    nock_1.default.cleanAll();
    (0, nock_1.default)(MetadataMocks_1.IDENTIPROOF_ISSUER_URL).get(oid4vci_common_1.WellKnownEndpoints.OPENID4VCI_ISSUER).reply(200, JSON.stringify(MetadataMocks_1.IDENTIPROOF_OID4VCI_METADATA));
}));
afterEach(() => __awaiter(void 0, void 0, void 0, function* () {
    nock_1.default.cleanAll();
}));
describe('Credential Request Client ', () => {
    it('should get a failed credential response with an unsupported format', function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const basePath = 'https://sphereonjunit2022101301.com/';
            (0, nock_1.default)(basePath).post(/.*/).reply(500, {
                error: 'unsupported_format',
                error_description: 'This is a mock error message',
            });
            const credReqClient = __1.CredentialRequestClientBuilder.fromCredentialOffer({ credentialOffer: MetadataMocks_1.INITIATION_TEST })
                .withCredentialEndpoint(basePath + '/credential')
                .withFormat('ldp_vc')
                .withCredentialType('https://imsglobal.github.io/openbadges-specification/ob_v3p0.html#OpenBadgeCredential')
                .build();
            const proof = yield __1.ProofOfPossessionBuilder.fromJwt({
                jwt,
                callbacks: {
                    signCallback: proofOfPossessionCallbackFunction,
                },
                version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
            })
                // .withEndpointMetadata(metadata)
                .withClientId('sphereon:wallet')
                .withKid(kid)
                .build();
            expect(credReqClient.getCredentialEndpoint()).toEqual(basePath + '/credential');
            const credentialRequest = yield credReqClient.createCredentialRequest({ proofInput: proof, version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08 });
            expect((_b = (_a = credentialRequest.proof) === null || _a === void 0 ? void 0 : _a.jwt) === null || _b === void 0 ? void 0 : _b.includes(partialJWT)).toBeTruthy();
            const result = yield credReqClient.acquireCredentialsUsingRequest(credentialRequest);
            expect((_c = result === null || result === void 0 ? void 0 : result.errorBody) === null || _c === void 0 ? void 0 : _c.error).toBe('unsupported_format');
        });
    });
    it('should get success credential response', function () {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            const mockedVC = 'eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2YyI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSIsImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL2V4YW1wbGVzL3YxIl0sImlkIjoiaHR0cDovL2V4YW1wbGUuZWR1L2NyZWRlbnRpYWxzLzM3MzIiLCJ0eXBlIjpbIlZlcmlmaWFibGVDcmVkZW50aWFsIiwiVW5pdmVyc2l0eURlZ3JlZUNyZWRlbnRpYWwiXSwiaXNzdWVyIjoiaHR0cHM6Ly9leGFtcGxlLmVkdS9pc3N1ZXJzLzU2NTA0OSIsImlzc3VhbmNlRGF0ZSI6IjIwMTAtMDEtMDFUMDA6MDA6MDBaIiwiY3JlZGVudGlhbFN1YmplY3QiOnsiaWQiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmNzEyZWJjNmYxYzI3NmUxMmVjMjEiLCJkZWdyZWUiOnsidHlwZSI6IkJhY2hlbG9yRGVncmVlIiwibmFtZSI6IkJhY2hlbG9yIG9mIFNjaWVuY2UgYW5kIEFydHMifX19LCJpc3MiOiJodHRwczovL2V4YW1wbGUuZWR1L2lzc3VlcnMvNTY1MDQ5IiwibmJmIjoxMjYyMzA0MDAwLCJqdGkiOiJodHRwOi8vZXhhbXBsZS5lZHUvY3JlZGVudGlhbHMvMzczMiIsInN1YiI6ImRpZDpleGFtcGxlOmViZmViMWY3MTJlYmM2ZjFjMjc2ZTEyZWMyMSJ9.z5vgMTK1nfizNCg5N-niCOL3WUIAL7nXy-nGhDZYO_-PNGeE-0djCpWAMH8fD8eWSID5PfkPBYkx_dfLJnQ7NA';
            (0, nock_1.default)('https://oidc4vci.demo.spruceid.com')
                .post(/credential/)
                .reply(200, {
                format: 'jwt-vc',
                credential: mockedVC,
            });
            const credReqClient = __1.CredentialRequestClientBuilder.fromCredentialOfferRequest({ request: MetadataMocks_1.INITIATION_TEST })
                .withCredentialEndpoint('https://oidc4vci.demo.spruceid.com/credential')
                .withFormat('jwt_vc')
                .withCredentialType('https://imsglobal.github.io/openbadges-specification/ob_v3p0.html#OpenBadgeCredential')
                .build();
            const proof = yield __1.ProofOfPossessionBuilder.fromJwt({
                jwt,
                callbacks: {
                    signCallback: proofOfPossessionCallbackFunction,
                },
                version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
            })
                // .withEndpointMetadata(metadata)
                .withKid(kid)
                .withClientId('sphereon:wallet')
                .build();
            const credentialRequest = yield credReqClient.createCredentialRequest({
                proofInput: proof,
                format: 'jwt',
                version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
            });
            expect((_b = (_a = credentialRequest.proof) === null || _a === void 0 ? void 0 : _a.jwt) === null || _b === void 0 ? void 0 : _b.includes(partialJWT)).toBeTruthy();
            expect(credentialRequest.format).toEqual('jwt_vc');
            const result = yield credReqClient.acquireCredentialsUsingRequest(credentialRequest);
            expect((_c = result === null || result === void 0 ? void 0 : result.successBody) === null || _c === void 0 ? void 0 : _c.credential).toEqual(mockedVC);
        });
    });
    it('should fail with invalid url', () => __awaiter(void 0, void 0, void 0, function* () {
        const credReqClient = __1.CredentialRequestClientBuilder.fromCredentialOfferRequest({ request: MetadataMocks_1.INITIATION_TEST })
            .withCredentialEndpoint('httpsf://oidc4vci.demo.spruceid.com/credential')
            .withFormat('jwt_vc')
            .withCredentialType('https://imsglobal.github.io/openbadges-specification/ob_v3p0.html#OpenBadgeCredential')
            .build();
        const proof = yield __1.ProofOfPossessionBuilder.fromJwt({
            jwt,
            callbacks: {
                signCallback: proofOfPossessionCallbackFunction,
            },
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        })
            // .withEndpointMetadata(metadata)
            .withKid(kid)
            .withClientId('sphereon:wallet')
            .build();
        yield expect(credReqClient.acquireCredentialsUsingRequest({ format: 'jwt_vc_json', types: ['random'], proof })).rejects.toThrow(Error(oid4vci_common_1.URL_NOT_VALID));
    }));
});
describe('Credential Request Client with Walt.id ', () => {
    beforeEach(() => {
        nock_1.default.cleanAll();
    });
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('should have correct metadata endpoints', function () {
        return __awaiter(this, void 0, void 0, function* () {
            nock_1.default.cleanAll();
            const WALT_IRR_URI = 'openid-initiate-issuance://?issuer=https%3A%2F%2Fjff.walt.id%2Fissuer-api%2Foidc%2F&credential_type=OpenBadgeCredential&pre-authorized_code=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhOTUyZjUxNi1jYWVmLTQ4YjMtODIxYy00OTRkYzgyNjljZjAiLCJwcmUtYXV0aG9yaXplZCI6dHJ1ZX0.YE5DlalcLC2ChGEg47CQDaN1gTxbaQqSclIVqsSAUHE&user_pin_required=false';
            const credentialOffer = yield CredentialOfferClient_1.CredentialOfferClient.fromURI(WALT_IRR_URI);
            const request = credentialOffer.credential_offer;
            const metadata = yield __1.MetadataClient.retrieveAllMetadata((0, oid4vci_common_1.getIssuerFromCredentialOfferPayload)(request));
            expect(metadata.credential_endpoint).toEqual(MetadataMocks_1.WALT_OID4VCI_METADATA.credential_endpoint);
            expect(metadata.token_endpoint).toEqual(MetadataMocks_1.WALT_OID4VCI_METADATA.token_endpoint);
            const credReqClient = __1.CredentialRequestClientBuilder.fromCredentialOffer({
                credentialOffer,
                metadata,
            }).build();
            expect(credReqClient.credentialRequestOpts.credentialEndpoint).toBe(MetadataMocks_1.WALT_OID4VCI_METADATA.credential_endpoint);
        });
    });
});
describe('Credential Request Client with different issuers ', () => {
    beforeEach(() => {
        nock_1.default.cleanAll();
    });
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('should create correct CredentialRequest for Spruce', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        const IRR_URI = 'openid-initiate-issuance://?issuer=https%3A%2F%2Fngi%2Doidc4vci%2Dtest%2Espruceid%2Exyz&credential_type=OpenBadgeCredential&pre-authorized_code=eyJhbGciOiJFUzI1NiJ9.eyJjcmVkZW50aWFsX3R5cGUiOlsiT3BlbkJhZGdlQ3JlZGVudGlhbCJdLCJleHAiOiIyMDIzLTA0LTIwVDA5OjA0OjM2WiIsIm5vbmNlIjoibWFibmVpT0VSZVB3V3BuRFFweEt3UnRsVVRFRlhGUEwifQ.qOZRPN8sTv_knhp7WaWte2-aDULaPZX--2i9unF6QDQNUllqDhvxgIHMDCYHCV8O2_Gj-T2x1J84fDMajE3asg&user_pin_required=false';
        const credentialRequest = yield (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: IRR_URI,
            metadata: (_a = (0, VciDataFixtures_1.getMockData)('spruce')) === null || _a === void 0 ? void 0 : _a.metadata,
        }))
            .build()
            .createCredentialRequest({
            proofInput: {
                proof_type: 'jwt',
                jwt: (_b = (0, VciDataFixtures_1.getMockData)('spruce')) === null || _b === void 0 ? void 0 : _b.credential.request.proof.jwt,
            },
            credentialTypes: ['OpenBadgeCredential'],
            format: 'jwt_vc',
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        const draft8CredentialRequest = (0, oid4vci_common_1.getCredentialRequestForVersion)(credentialRequest, oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08);
        expect(draft8CredentialRequest).toEqual((_c = (0, VciDataFixtures_1.getMockData)('spruce')) === null || _c === void 0 ? void 0 : _c.credential.request);
    }));
    it('should create correct CredentialRequest for Walt', () => __awaiter(void 0, void 0, void 0, function* () {
        var _d, _e, _f;
        nock_1.default.cleanAll();
        const IRR_URI = 'openid-initiate-issuance://?issuer=https%3A%2F%2Fjff.walt.id%2Fissuer-api%2Fdefault%2Foidc%2F&credential_type=OpenBadgeCredential&pre-authorized_code=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIwMTc4OTNjYy04ZTY3LTQxNzItYWZlOS1lODcyYmYxNDBlNWMiLCJwcmUtYXV0aG9yaXplZCI6dHJ1ZX0.ODfq2AIhOcB61dAb3zMrXBJjPJaf53zkeHh_AssYyYA&user_pin_required=false';
        const credentialOffer = yield (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: IRR_URI,
            metadata: (_d = (0, VciDataFixtures_1.getMockData)('walt')) === null || _d === void 0 ? void 0 : _d.metadata,
        }))
            .build()
            .createCredentialRequest({
            proofInput: {
                proof_type: 'jwt',
                jwt: (_e = (0, VciDataFixtures_1.getMockData)('walt')) === null || _e === void 0 ? void 0 : _e.credential.request.proof.jwt,
            },
            credentialTypes: ['OpenBadgeCredential'],
            format: 'jwt_vc',
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        expect(credentialOffer).toEqual((_f = (0, VciDataFixtures_1.getMockData)('walt')) === null || _f === void 0 ? void 0 : _f.credential.request);
    }));
    // Missing the issuer required property
    xit('should create correct CredentialRequest for uniissuer', () => __awaiter(void 0, void 0, void 0, function* () {
        var _g, _h, _j;
        const IRR_URI = 'https://oidc4vc.uniissuer.io/?credential_type=OpenBadgeCredential&pre-authorized_code=0ApoI8rxVmdQ44RIpuDbFIURIIkOhyek&user_pin_required=false';
        const credentialOffer = yield (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: IRR_URI,
            metadata: (_g = (0, VciDataFixtures_1.getMockData)('uniissuer')) === null || _g === void 0 ? void 0 : _g.metadata,
        }))
            .build()
            .createCredentialRequest({
            proofInput: {
                proof_type: 'jwt',
                jwt: (_h = (0, VciDataFixtures_1.getMockData)('uniissuer')) === null || _h === void 0 ? void 0 : _h.credential.request.proof.jwt,
            },
            credentialTypes: ['OpenBadgeCredential'],
            format: 'jwt_vc',
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        expect(credentialOffer).toEqual((_j = (0, VciDataFixtures_1.getMockData)('uniissuer')) === null || _j === void 0 ? void 0 : _j.credential.request);
    }));
    it('should create correct CredentialRequest for mattr', () => __awaiter(void 0, void 0, void 0, function* () {
        var _k, _l, _m;
        const IRR_URI = 'openid-initiate-issuance://?issuer=https://launchpad.mattrlabs.com&credential_type=OpenBadgeCredential&pre-authorized_code=g0UCOj6RAN5AwHU6gczm_GzB4_lH6GW39Z0Dl2DOOiO';
        const credentialOffer = yield (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: IRR_URI,
            metadata: (_k = (0, VciDataFixtures_1.getMockData)('mattr')) === null || _k === void 0 ? void 0 : _k.metadata,
        }))
            .build()
            .createCredentialRequest({
            proofInput: {
                proof_type: 'jwt',
                jwt: (_l = (0, VciDataFixtures_1.getMockData)('mattr')) === null || _l === void 0 ? void 0 : _l.credential.request.proof.jwt,
            },
            credentialTypes: ['OpenBadgeCredential'],
            format: 'ldp_vc',
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        const credentialRequest = (0, oid4vci_common_1.getCredentialRequestForVersion)(credentialOffer, oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08);
        expect(credentialRequest).toEqual((_m = (0, VciDataFixtures_1.getMockData)('mattr')) === null || _m === void 0 ? void 0 : _m.credential.request);
    }));
    it('should create correct CredentialRequest for diwala', () => __awaiter(void 0, void 0, void 0, function* () {
        var _o, _p, _q;
        const IRR_URI = 'openid-initiate-issuance://?issuer=https://oidc4vc.diwala.io&credential_type=OpenBadgeCredential&pre-authorized_code=eyJhbGciOiJIUzI1NiJ9.eyJjcmVkZW50aWFsX3R5cGUiOiJPcGVuQmFkZ2VDcmVkZW50aWFsIiwiZXhwIjoxNjgxOTg0NDY3fQ.fEAHKz2nuWfiYHw406iNxr-81pWkNkbi31bWsYSf6Ng';
        const credentialOffer = yield (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: IRR_URI,
            metadata: (_o = (0, VciDataFixtures_1.getMockData)('diwala')) === null || _o === void 0 ? void 0 : _o.metadata,
        }))
            .build()
            .createCredentialRequest({
            proofInput: {
                proof_type: 'jwt',
                jwt: (_p = (0, VciDataFixtures_1.getMockData)('diwala')) === null || _p === void 0 ? void 0 : _p.credential.request.proof.jwt,
            },
            credentialTypes: ['OpenBadgeCredential'],
            format: 'ldp_vc',
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        // createCredentialRequest returns uniform format in draft 11
        const credentialRequest = (0, oid4vci_common_1.getCredentialRequestForVersion)(credentialOffer, oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08);
        expect(credentialRequest).toEqual((_q = (0, VciDataFixtures_1.getMockData)('diwala')) === null || _q === void 0 ? void 0 : _q.credential.request);
    }));
});
//# sourceMappingURL=CredentialRequestClient.spec.js.map