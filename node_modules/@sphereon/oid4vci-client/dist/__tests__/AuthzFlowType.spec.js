"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
//todo: this file is just testing v9, we probably want to add v11 tests here as well
describe('Authorization Flow Type determination', () => {
    it('should return authorization code flow type with a single credential_type', () => {
        expect(oid4vci_common_1.AuthzFlowType.valueOf({
            issuer: 'test',
            credential_type: 'test',
        })).toEqual(oid4vci_common_1.AuthzFlowType.AUTHORIZATION_CODE_FLOW);
    });
    it('should return authorization code flow type with a credential_type array', () => {
        expect(oid4vci_common_1.AuthzFlowType.valueOf({
            issuer: 'test',
            credential_type: ['test', 'test1'],
        })).toEqual(oid4vci_common_1.AuthzFlowType.AUTHORIZATION_CODE_FLOW);
    });
    it('should return pre-authorized code flow with a single credential_type', () => {
        expect(oid4vci_common_1.AuthzFlowType.valueOf({
            issuer: 'test',
            credential_type: 'test',
            'pre-authorized_code': 'test',
        })).toEqual(oid4vci_common_1.AuthzFlowType.PRE_AUTHORIZED_CODE_FLOW);
    });
    it('should return pre-authorized code flow with a credential_type array', () => {
        expect(oid4vci_common_1.AuthzFlowType.valueOf({
            issuer: 'test',
            credential_type: ['test', 'test1'],
            'pre-authorized_code': 'test',
        })).toEqual(oid4vci_common_1.AuthzFlowType.PRE_AUTHORIZED_CODE_FLOW);
    });
});
//# sourceMappingURL=AuthzFlowType.spec.js.map