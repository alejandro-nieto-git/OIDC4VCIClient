"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const nock_1 = __importDefault(require("nock"));
const AccessTokenClient_1 = require("../AccessTokenClient");
const IT_spec_1 = require("./IT.spec");
const MetadataMocks_1 = require("./MetadataMocks");
const MOCK_URL = 'https://sphereonjunit20221013.com/';
describe('AccessTokenClient should', () => {
    beforeEach(() => {
        nock_1.default.cleanAll();
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OAUTH_AS).reply(404, {});
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OPENID_CONFIGURATION).reply(404, {});
    });
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('get Access Token for with pre-authorized code without resulting in errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            grant_type: oid4vci_common_1.GrantTypes.PRE_AUTHORIZED_CODE,
            'pre-authorized_code': '20221013',
            client_id: 'sphereon',
        };
        const body = {
            access_token: 'ey6546.546654.64565',
            authorization_pending: false,
            c_nonce: 'c_nonce2022101300',
            c_nonce_expires_in: 2022101300,
            interval: 2022101300,
            token_type: 'Bearer',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, JSON.stringify(body));
        const accessTokenResponse = yield accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            asOpts: { as: MOCK_URL },
        });
        expect(accessTokenResponse.successBody).toEqual(body);
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get Access Token for authorization code without resulting in errors', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            client_id: 'test-client',
            code_verifier: 'F0Y2OGARX2ppIERYdSVuLCV3Zi95Ci5yWzAYNU8QQC0',
            code: '9mq3kwIuNZ88czRjJ2-UDxtaNXulOfxHSXo-kM01MLV',
            redirect_uri: 'http://test.com/cb',
            grant_type: oid4vci_common_1.GrantTypes.AUTHORIZATION_CODE,
        };
        const body = {
            access_token: '6W-kZopGNBq8e-5KvnGf2u0p0iGSxWZ7jIGV86nO1Dn',
            expires_in: 3600,
            scope: 'TestCredential',
            token_type: 'Bearer',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, JSON.stringify(body));
        const accessTokenResponse = yield accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            asOpts: { as: MOCK_URL },
        });
        expect(accessTokenResponse.successBody).toEqual(body);
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get error for incorrect code', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            grant_type: oid4vci_common_1.GrantTypes.PRE_AUTHORIZED_CODE,
            'pre-authorized_code': '',
            user_pin: '1.0',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, {});
        yield expect(accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            asOpts: { as: MOCK_URL },
        })).rejects.toThrow('Pre-authorization must be proven by presenting the pre-authorized code. Code must be present.');
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get error for incorrect pin', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            grant_type: oid4vci_common_1.GrantTypes.PRE_AUTHORIZED_CODE,
            'pre-authorized_code': '20221013',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, {});
        yield expect(accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            isPinRequired: true,
            asOpts: { as: MOCK_URL },
        })).rejects.toThrow('A valid pin consisting of maximal 8 numeric characters must be present.');
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get error for incorrectly long pin', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            grant_type: oid4vci_common_1.GrantTypes.PRE_AUTHORIZED_CODE,
            'pre-authorized_code': '20221013',
            client_id: 'sphereon.com',
            user_pin: '123456789',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, {});
        yield expect(accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            isPinRequired: true,
            asOpts: { as: MOCK_URL },
        })).rejects.toThrow(Error('A valid pin consisting of maximal 8 numeric characters must be present.'));
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get success for correct length of pin', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        const accessTokenRequest = {
            grant_type: oid4vci_common_1.GrantTypes.PRE_AUTHORIZED_CODE,
            'pre-authorized_code': '20221013',
            client_id: 'sphereon.com',
            user_pin: '12345678',
        };
        const body = {
            access_token: 'ey6546.546654.64565',
            authorization_pending: false,
            c_nonce: 'c_nonce2022101300',
            c_nonce_expires_in: 2022101300,
            interval: 2022101300,
            token_type: 'Bearer',
        };
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, body);
        const response = yield accessTokenClient.acquireAccessTokenUsingRequest({
            accessTokenRequest,
            isPinRequired: true,
            asOpts: { as: MOCK_URL },
        });
        expect(response.successBody).toEqual(body);
    }), IT_spec_1.UNIT_TEST_TIMEOUT);
    it('get error for using a pin when not requested', () => __awaiter(void 0, void 0, void 0, function* () {
        const accessTokenClient = new AccessTokenClient_1.AccessTokenClient();
        (0, nock_1.default)(MOCK_URL).post(/.*/).reply(200, {});
        yield expect(() => accessTokenClient.acquireAccessToken({
            credentialOffer: MetadataMocks_1.INITIATION_TEST,
            pin: '1234',
        })).rejects.toThrow(Error('Cannot set a pin, when the pin is not required.'));
    }));
    it('get error if no as, issuer and metadata values are present', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(() => AccessTokenClient_1.AccessTokenClient.determineTokenURL({
            asOpts: undefined,
            issuerOpts: undefined,
            metadata: undefined,
        })).toThrow(Error('Cannot determine token URL if no issuer, metadata and no Authorization Server values are present'));
    }));
});
//# sourceMappingURL=AccessTokenClient.spec.js.map