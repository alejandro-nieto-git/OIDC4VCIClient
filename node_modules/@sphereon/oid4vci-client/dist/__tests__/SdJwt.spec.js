"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UNIT_TEST_TIMEOUT = void 0;
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const nock_1 = __importDefault(require("nock"));
const __1 = require("..");
const issuer_1 = require("../../../issuer");
exports.UNIT_TEST_TIMEOUT = 30000;
const alg = 'ES256';
const jwk = { kty: 'EC', crv: 'P-256', x: 'zQOowIC1gWJtdddB5GAt4lau6Lt8Ihy771iAfam-1pc', y: 'cjD_7o3gdQ1vgiQy3_sMGs7WrwCMU9FQYimA3HxnMlw' };
const issuerMetadata = new issuer_1.IssuerMetadataBuilderV1_11()
    .withCredentialIssuer('https://example.com')
    .withCredentialEndpoint('https://credenital-endpoint.example.com')
    .withTokenEndpoint('https://token-endpoint.example.com')
    .addSupportedCredential({
    format: 'vc+sd-jwt',
    vct: 'SdJwtCredential',
    id: 'SdJwtCredentialId',
})
    .build();
const vcIssuer = new issuer_1.VcIssuerBuilder()
    .withIssuerMetadata(issuerMetadata)
    .withInMemoryCNonceState()
    .withInMemoryCredentialOfferState()
    .withInMemoryCredentialOfferURIState()
    // TODO: see if we can construct an sd-jwt vc based on the input
    .withCredentialSignerCallback(() => __awaiter(void 0, void 0, void 0, function* () {
    return 'sd-jwt';
}))
    .withJWTVerifyCallback(() => Promise.resolve({
    alg,
    jwk,
    jwt: {
        header: {
            typ: 'openid4vci-proof+jwt',
            alg,
            jwk,
        },
        payload: {
            aud: issuerMetadata.credential_issuer,
            iat: +new Date(),
            nonce: 'a-c-nonce',
        },
    },
}))
    .build();
describe('sd-jwt vc', () => {
    beforeEach(() => {
        nock_1.default.cleanAll();
    });
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('succeed with a full flow', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const offerUri = yield vcIssuer.createCredentialOfferURI({
            grants: {
                'urn:ietf:params:oauth:grant-type:pre-authorized_code': {
                    'pre-authorized_code': '123',
                    user_pin_required: false,
                },
            },
            credentials: ['SdJwtCredentialId'],
        });
        (0, nock_1.default)(vcIssuer.issuerMetadata.credential_issuer).get('/.well-known/openid-credential-issuer').reply(200, JSON.stringify(issuerMetadata));
        (0, nock_1.default)(vcIssuer.issuerMetadata.credential_issuer).get('/.well-known/openid-configuration').reply(404);
        (0, nock_1.default)(vcIssuer.issuerMetadata.credential_issuer).get('/.well-known/oauth-authorization-server').reply(404);
        expect(offerUri.uri).toEqual('openid-credential-offer://?credential_offer=%7B%22grants%22%3A%7B%22urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Apre-authorized_code%22%3A%7B%22pre-authorized_code%22%3A%22123%22%2C%22user_pin_required%22%3Afalse%7D%7D%2C%22credentials%22%3A%5B%22SdJwtCredentialId%22%5D%2C%22credential_issuer%22%3A%22https%3A%2F%2Fexample.com%22%7D');
        const client = yield __1.OpenID4VCIClient.fromURI({
            uri: offerUri.uri,
        });
        expect((_a = client.credentialOffer) === null || _a === void 0 ? void 0 : _a.credential_offer).toEqual({
            credential_issuer: 'https://example.com',
            credentials: ['SdJwtCredentialId'],
            grants: {
                'urn:ietf:params:oauth:grant-type:pre-authorized_code': {
                    'pre-authorized_code': '123',
                    user_pin_required: false,
                },
            },
        });
        const supported = client.getCredentialsSupported(true, 'vc+sd-jwt');
        expect(supported).toEqual([
            {
                vct: 'SdJwtCredential',
                format: 'vc+sd-jwt',
                id: 'SdJwtCredentialId',
            },
        ]);
        const offered = supported[0];
        (0, nock_1.default)(issuerMetadata.token_endpoint)
            .post('/')
            .reply(200, (_, body) => __awaiter(void 0, void 0, void 0, function* () {
            const parsedBody = Object.fromEntries(body.split('&').map((x) => x.split('=')));
            return (0, issuer_1.createAccessTokenResponse)(parsedBody, {
                credentialOfferSessions: vcIssuer.credentialOfferSessions,
                accessTokenIssuer: 'https://issuer.example.com',
                cNonces: vcIssuer.cNonces,
                cNonce: 'a-c-nonce',
                accessTokenSignerCallback: () => __awaiter(void 0, void 0, void 0, function* () { return 'ey.val.ue'; }),
                tokenExpiresIn: 500,
            });
        }));
        yield client.acquireAccessToken({});
        (0, nock_1.default)(issuerMetadata.credential_endpoint)
            .post('/')
            .reply(200, (_, body) => __awaiter(void 0, void 0, void 0, function* () {
            return vcIssuer.issueCredential({
                credentialRequest: body,
                credential: {
                    vct: 'Hello',
                    iss: 'did:example:123',
                    iat: 123,
                    // Defines what can be disclosed (optional)
                    __disclosureFrame: {
                        name: true,
                    },
                },
                newCNonce: 'new-c-nonce',
            });
        }));
        const credentials = yield client.acquireCredentials({
            credentialTypes: [offered.vct],
            format: 'vc+sd-jwt',
            alg,
            jwk,
            proofCallbacks: {
                // When using sd-jwt for real, this jwt should include a jwk
                signCallback: () => __awaiter(void 0, void 0, void 0, function* () { return 'ey.ja.ja'; }),
            },
        });
        expect(credentials).toEqual({
            c_nonce: 'new-c-nonce',
            c_nonce_expires_in: 300,
            credential: 'sd-jwt',
            format: 'vc+sd-jwt',
        });
    }), exports.UNIT_TEST_TIMEOUT);
});
//# sourceMappingURL=SdJwt.spec.js.map