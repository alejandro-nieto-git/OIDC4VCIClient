"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UNIT_TEST_TIMEOUT = void 0;
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const ssi_sdk_ext_key_utils_1 = require("@sphereon/ssi-sdk-ext.key-utils");
const ssi_types_1 = require("@sphereon/ssi-types");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
//@ts-ignore
const keyto_1 = require("@trust/keyto");
const cross_fetch_1 = require("cross-fetch");
const debug_1 = __importDefault(require("debug"));
const jose_1 = require("jose");
const u8a = __importStar(require("uint8arrays"));
const __1 = require("..");
exports.UNIT_TEST_TIMEOUT = 30000;
const ISSUER_URL = 'https://conformance-test.ebsi.eu/conformance/v3/issuer-mock';
const AUTH_URL = 'https://conformance-test.ebsi.eu/conformance/v3/auth-mock';
const jwk = {
    alg: 'ES256',
    use: 'sig',
    kty: 'EC',
    crv: 'P-256',
    x: 'hUWYK06qFvdudydiqnEhVJhZ-73jcLtuzH8kIyNOSHE',
    y: 'UZf7oUkJdo65SQekMD5ssiRclEimG2SmlsjXf3QwQJo',
    d: 'zDeeo3K0Pk8dofeKcajvJYxMZ1vijx_cVDJQl1IpbAM',
};
console.log(`JWK (private/orig): ${JSON.stringify(jwk, null, 2)}`);
const privateKey = (0, keyto_1.from)(jwk, 'jwk').toString('blk', 'private');
const publicKey = (0, keyto_1.from)(jwk, 'jwk').toString('blk', 'public');
console.log(`Private key: ${privateKey}`);
console.log(`Public key: ${publicKey}`);
console.log(`Private key (b64): ${jose_1.base64url.encode(u8a.fromString(privateKey, 'base16'))}`);
console.log(`JWK (private 2) ${JSON.stringify((0, ssi_sdk_ext_key_utils_1.toJwk)(privateKey, 'Secp256r1', { isPrivateKey: true }))}`);
console.log(`JWK (public  2) ${JSON.stringify((0, ssi_sdk_ext_key_utils_1.toJwk)(publicKey, 'Secp256r1', { isPrivateKey: false }))}`);
// const DID_METHOD = 'did:key'
const DID = 'did:key:z2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9Kbrm54tL4pRrDDhR1QJ5RHPMXUq5MzYpZL2k35vya5eMiNxschNy9AJ74CC3MmcYiZJGZfyhWQ6qDgTVcDSHdquwPYvLDut383JbrgYdZYYSC2merTMgmQtUi3huYhaky1qE';
const DID_URL_ENCODED = 'did%3Akey%3Az2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9Kbrm54tL4pRrDDhR1QJ5RHPMXUq5MzYpZL2k35vya5eMiNxschNy9AJ74CC3MmcYiZJGZfyhWQ6qDgTVcDSHdquwPYvLDut383JbrgYdZYYSC2merTMgmQtUi3huYhaky1qE';
// const PRIVATE_KEY_HEX = '7dd923e40f4615ac496119f7e793cc2899e99b64b88ca8603db986700089532b'
// const PUBLIC_KEY_HEX =
//   '04a23cb4c83901acc2eb0f852599610de0caeac260bf8ed05e7f902eaac0f9c8d74dd4841b94d13424d32af8ec0e9976db9abfa7e3a59e10d565c5d4d901b4be63'
// pub  hex: 35e03477cb29f3ac518770dccd4e26e703cd21b9741c24b038170c377b0d99d9
// priv hex: 913466d1a38d1d8c0d3c0fb0fc3b633075085a31372bbd2a8022215a88d9d1e5
// const did = `did:key:z6Mki5ZwZKN1dBQprfJTikUvkDxrHijiiQngkWviMF5gw2Hv`;
const kid = `${DID}#z2dmzD81cgPx8Vki7JbuuMmFYrWPgYoytykUZ3eyqht1j9Kbrm54tL4pRrDDhR1QJ5RHPMXUq5MzYpZL2k35vya5eMiNxschNy9AJ74CC3MmcYiZJGZfyhWQ6qDgTVcDSHdquwPYvLDut383JbrgYdZYYSC2merTMgmQtUi3huYhaky1qE`;
// const jw = jose.importKey()
// EBSI returning a 500 in credential endpoint all of a sudden
describe.skip('OID4VCI-Client using Sphereon issuer should', () => {
    function test(credentialType) {
        return __awaiter(this, void 0, void 0, function* () {
            debug_1.default.enable('*');
            const offer = yield getCredentialOffer(credentialType);
            const client = yield __1.OpenID4VCIClient.fromURI({
                uri: offer,
                kid,
                alg: oid4vci_common_1.Alg.ES256,
                clientId: DID_URL_ENCODED,
            });
            expect(client.credentialOffer).toBeDefined();
            expect(client.endpointMetadata).toBeDefined();
            expect(client.getCredentialEndpoint()).toEqual(`${ISSUER_URL}/credential`);
            expect(client.getAccessTokenEndpoint()).toEqual(`${AUTH_URL}/token`);
            if (credentialType !== 'CTWalletCrossPreAuthorisedInTime') {
                const url = yield client.createAuthorizationRequestUrl({
                    authorizationRequest: {
                        redirectUri: 'openid4vc%3A',
                    },
                });
                const result = yield (0, cross_fetch_1.fetch)(url);
                console.log(result.text());
            }
            const accessToken = yield client.acquireAccessToken({ pin: '0891' });
            // console.log(accessToken);
            expect(accessToken).toMatchObject({
                expires_in: 86400,
                // scope: 'GuestCredential',
                token_type: 'Bearer',
            });
            const format = 'jwt_vc';
            const credentialResponse = yield client.acquireCredentials({
                credentialTypes: client.getCredentialOfferTypes()[0],
                format,
                proofCallbacks: {
                    signCallback: proofOfPossessionCallbackFunction,
                },
                kid,
                deferredCredentialAwait: true,
                deferredCredentialIntervalInMS: 5000,
            });
            console.log(JSON.stringify(credentialResponse, null, 2));
            expect(credentialResponse.credential).toBeDefined();
            const wrappedVC = ssi_types_1.CredentialMapper.toWrappedVerifiableCredential(credentialResponse.credential);
            expect(format.startsWith(wrappedVC.format)).toEqual(true);
        });
    }
    // Current conformance tests is not stable as changes are being applied it seems
    it('succeed in a full flow with the client using OpenID4VCI version 11 and jwt_vc_json', () => __awaiter(void 0, void 0, void 0, function* () {
        yield test('CTWalletCrossPreAuthorisedInTime');
        yield test('CTWalletCrossPreAuthorisedDeferred');
        // await test('CTWalletCrossAuthorisedInTime');
    }), exports.UNIT_TEST_TIMEOUT);
});
function getCredentialOffer(credentialType) {
    return __awaiter(this, void 0, void 0, function* () {
        const credentialOffer = yield (0, cross_fetch_1.fetch)(`https://conformance-test.ebsi.eu/conformance/v3/issuer-mock/initiate-credential-offer?credential_type=${credentialType}&client_id=${DID_URL_ENCODED}&credential_offer_endpoint=openid-credential-offer%3A%2F%2F`, {
            method: 'GET',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
        });
        return yield credentialOffer.text();
    });
}
function proofOfPossessionCallbackFunction(args, kid) {
    return __awaiter(this, void 0, void 0, function* () {
        const importedJwk = yield (0, jose_1.importJWK)(jwk);
        return yield new jose_1.SignJWT(Object.assign({}, args.payload))
            .setProtectedHeader(Object.assign(Object.assign({}, args.header), { kid: kid }))
            .setIssuer(DID)
            .setIssuedAt()
            .setExpirationTime('2m')
            .sign(importedJwk);
    });
}
//# sourceMappingURL=EBSIE2E.spec.test.js.map