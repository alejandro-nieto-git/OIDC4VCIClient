"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const nock_1 = __importDefault(require("nock"));
const OpenID4VCIClient_1 = require("../OpenID4VCIClient");
const MOCK_URL = 'https://server.example.com/';
describe('OpenID4VCIClient should', () => {
    let client;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        (0, nock_1.default)(MOCK_URL).get(/.*/).reply(200, {});
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OAUTH_AS).reply(404, {});
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OPENID_CONFIGURATION).reply(404, {});
        client = yield OpenID4VCIClient_1.OpenID4VCIClient.fromURI({
            clientId: 'test-client',
            uri: 'openid-initiate-issuance://?issuer=https://server.example.com&credential_type=TestCredential',
            createAuthorizationRequestURL: false,
        });
    }));
    afterEach(() => {
        nock_1.default.cleanAll();
    });
    it('should successfully construct an authorization request url', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        (_a = client._state.endpointMetadata) === null || _a === void 0 ? void 0 : _a.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        const url = yield client.createAuthorizationRequestUrl({
            authorizationRequest: {
                scope: 'openid TestCredential',
                redirectUri: 'http://localhost:8881/cb',
            },
        });
        const urlSearchParams = new URLSearchParams(url.split('?')[1]);
        const scope = (_b = urlSearchParams.get('scope')) === null || _b === void 0 ? void 0 : _b.split(' ');
        expect(scope === null || scope === void 0 ? void 0 : scope[0]).toBe('openid');
    }));
    it('throw an error if authorization endpoint is not set in server metadata', () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(client.createAuthorizationRequestUrl({
            authorizationRequest: {
                scope: 'openid TestCredential',
                redirectUri: 'http://localhost:8881/cb',
            },
        })).rejects.toThrow(Error('Server metadata does not contain authorization endpoint'));
    }));
    it("injects 'openid' as the first scope if not provided", () => __awaiter(void 0, void 0, void 0, function* () {
        var _c, _d;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        (_c = client._state.endpointMetadata) === null || _c === void 0 ? void 0 : _c.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        const url = yield client.createAuthorizationRequestUrl({
            pkce: {
                codeChallengeMethod: oid4vci_common_1.CodeChallengeMethod.S256,
                codeChallenge: 'mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs',
            },
            authorizationRequest: {
                scope: 'TestCredential',
                redirectUri: 'http://localhost:8881/cb',
            },
        });
        const urlSearchParams = new URLSearchParams(url.split('?')[1]);
        const scope = (_d = urlSearchParams.get('scope')) === null || _d === void 0 ? void 0 : _d.split(' ');
        expect(scope === null || scope === void 0 ? void 0 : scope[0]).toBe('openid');
    }));
    it('throw an error if no scope and no authorization_details is provided', () => __awaiter(void 0, void 0, void 0, function* () {
        (0, nock_1.default)(MOCK_URL).get(/.*/).reply(200, {});
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OAUTH_AS).reply(200, {});
        (0, nock_1.default)(MOCK_URL).get(oid4vci_common_1.WellKnownEndpoints.OPENID_CONFIGURATION).reply(200, {});
        // Use a client with issuer only to trigger the error
        client = yield OpenID4VCIClient_1.OpenID4VCIClient.fromCredentialIssuer({
            credentialIssuer: MOCK_URL,
            createAuthorizationRequestURL: false,
            retrieveServerMetadata: false,
        });
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        client._state.endpointMetadata = {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            credentialIssuerMetadata: {
                authorization_endpoint: `${MOCK_URL}v1/auth/authorize`,
                token_endpoint: `${MOCK_URL}/token`,
            },
        };
        // client._state.endpointMetadata.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        yield expect(client.createAuthorizationRequestUrl({
            pkce: {
                codeChallengeMethod: oid4vci_common_1.CodeChallengeMethod.S256,
                codeChallenge: 'mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs',
            },
            authorizationRequest: {
                redirectUri: 'http://localhost:8881/cb',
            },
        })).rejects.toThrow(Error('Please provide a scope or authorization_details if no credential offer is present'));
    }));
    it('create an authorization request url with authorization_details array property', () => __awaiter(void 0, void 0, void 0, function* () {
        var _e;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        (_e = client._state.endpointMetadata) === null || _e === void 0 ? void 0 : _e.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        yield expect(client.createAuthorizationRequestUrl({
            pkce: {
                codeChallengeMethod: oid4vci_common_1.CodeChallengeMethod.S256,
                codeChallenge: 'mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs',
            },
            authorizationRequest: {
                authorizationDetails: [
                    {
                        type: 'openid_credential',
                        format: 'ldp_vc',
                        credential_definition: {
                            '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],
                            types: ['VerifiableCredential', 'UniversityDegreeCredential'],
                        },
                    },
                    {
                        type: 'openid_credential',
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        format: 'mso_mdoc',
                        doctype: 'org.iso.18013.5.1.mDL',
                    },
                ],
                redirectUri: 'http://localhost:8881/cb',
            },
        })).resolves.toEqual('https://server.example.com/v1/auth/authorize?response_type=code&code_challenge_method=S256&code_challenge=mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs&authorization_details=%5B%7B%22type%22%3A%22openid_credential%22%2C%22format%22%3A%22ldp_vc%22%2C%22credential_definition%22%3A%7B%22%40context%22%3A%5B%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fv1%22%2C%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fexamples%2Fv1%22%5D%2C%22types%22%3A%5B%22VerifiableCredential%22%2C%22UniversityDegreeCredential%22%5D%7D%2C%22locations%22%3A%5B%22https%3A%2F%2Fserver%2Eexample%2Ecom%22%5D%7D%2C%7B%22type%22%3A%22openid_credential%22%2C%22format%22%3A%22mso_mdoc%22%2C%22doctype%22%3A%22org%2Eiso%2E18013%2E5%2E1%2EmDL%22%2C%22locations%22%3A%5B%22https%3A%2F%2Fserver%2Eexample%2Ecom%22%5D%7D%5D&redirect_uri=http%3A%2F%2Flocalhost%3A8881%2Fcb&client_id=test-client&scope=openid');
    }));
    it('create an authorization request url with authorization_details object property', () => __awaiter(void 0, void 0, void 0, function* () {
        var _f;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        (_f = client._state.endpointMetadata) === null || _f === void 0 ? void 0 : _f.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        yield expect(client.createAuthorizationRequestUrl({
            pkce: {
                codeChallengeMethod: oid4vci_common_1.CodeChallengeMethod.S256,
                codeChallenge: 'mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs',
            },
            authorizationRequest: {
                authorizationDetails: {
                    type: 'openid_credential',
                    format: 'ldp_vc',
                    credential_definition: {
                        '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],
                        types: ['VerifiableCredential', 'UniversityDegreeCredential'],
                    },
                },
                redirectUri: 'http://localhost:8881/cb',
            },
        })).resolves.toEqual('https://server.example.com/v1/auth/authorize?response_type=code&code_challenge_method=S256&code_challenge=mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs&authorization_details=%7B%22type%22%3A%22openid_credential%22%2C%22format%22%3A%22ldp_vc%22%2C%22credential_definition%22%3A%7B%22%40context%22%3A%5B%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fv1%22%2C%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fexamples%2Fv1%22%5D%2C%22types%22%3A%5B%22VerifiableCredential%22%2C%22UniversityDegreeCredential%22%5D%7D%2C%22locations%22%3A%5B%22https%3A%2F%2Fserver%2Eexample%2Ecom%22%5D%7D&redirect_uri=http%3A%2F%2Flocalhost%3A8881%2Fcb&client_id=test-client&scope=openid');
    }));
    it('create an authorization request url with authorization_details and scope', () => __awaiter(void 0, void 0, void 0, function* () {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        client._state.endpointMetadata.credentialIssuerMetadata.authorization_endpoint = `${MOCK_URL}v1/auth/authorize`;
        yield expect(client.createAuthorizationRequestUrl({
            pkce: {
                codeChallengeMethod: oid4vci_common_1.CodeChallengeMethod.S256,
                codeChallenge: 'mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs',
            },
            authorizationRequest: {
                authorizationDetails: {
                    type: 'openid_credential',
                    format: 'ldp_vc',
                    locations: ['https://test.com'],
                    credential_definition: {
                        '@context': ['https://www.w3.org/2018/credentials/v1', 'https://www.w3.org/2018/credentials/examples/v1'],
                        types: ['VerifiableCredential', 'UniversityDegreeCredential'],
                    },
                },
                scope: 'openid',
                redirectUri: 'http://localhost:8881/cb',
            },
        })).resolves.toEqual('https://server.example.com/v1/auth/authorize?response_type=code&code_challenge_method=S256&code_challenge=mE2kPHmIprOqtkaYmESWj35yz-PB5vzdiSu0tAZ8sqs&authorization_details=%7B%22type%22%3A%22openid_credential%22%2C%22format%22%3A%22ldp_vc%22%2C%22locations%22%3A%5B%22https%3A%2F%2Ftest%2Ecom%22%2C%22https%3A%2F%2Fserver%2Eexample%2Ecom%22%5D%2C%22credential_definition%22%3A%7B%22%40context%22%3A%5B%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fv1%22%2C%22https%3A%2F%2Fwww%2Ew3%2Eorg%2F2018%2Fcredentials%2Fexamples%2Fv1%22%5D%2C%22types%22%3A%5B%22VerifiableCredential%22%2C%22UniversityDegreeCredential%22%5D%7D%7D&redirect_uri=http%3A%2F%2Flocalhost%3A8881%2Fcb&client_id=test-client&scope=openid');
    }));
});
//# sourceMappingURL=OpenID4VCIClient.spec.js.map