"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UNIT_TEST_TIMEOUT = void 0;
const crypto = __importStar(require("crypto"));
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const ssi_types_1 = require("@sphereon/ssi-types");
const didts = __importStar(require("@transmute/did-key.js"));
const cross_fetch_1 = require("cross-fetch");
const debug_1 = __importDefault(require("debug"));
const jose_1 = require("jose");
const uuid_1 = require("uuid");
const __1 = require("..");
exports.UNIT_TEST_TIMEOUT = 60000;
const ISSUER_URL = 'https://ssi.sphereon.com/pf3';
const jwk = {
    crv: 'Ed25519',
    d: 'kTRm0aONHYwNPA-w_DtjMHUIWjE3K70qgCIhWojZ0eU',
    x: 'NeA0d8sp86xRh3DczU4m5wPNIbl0HCSwOBcMN3sNmdk',
    kty: 'OKP',
};
// pub  hex: 35e03477cb29f3ac518770dccd4e26e703cd21b9741c24b038170c377b0d99d9
// priv hex: 913466d1a38d1d8c0d3c0fb0fc3b633075085a31372bbd2a8022215a88d9d1e5
const did = `did:key:z6Mki5ZwZKN1dBQprfJTikUvkDxrHijiiQngkWviMF5gw2Hv`;
const kid = `${did}#z6Mki5ZwZKN1dBQprfJTikUvkDxrHijiiQngkWviMF5gw2Hv`;
describe('OID4VCI-Client using Sphereon issuer should', () => {
    function test(format) {
        return __awaiter(this, void 0, void 0, function* () {
            debug_1.default.enable('*');
            const offer = yield getCredentialOffer(format);
            const client = yield __1.OpenID4VCIClient.fromURI({
                uri: offer.uri,
                kid,
                alg: oid4vci_common_1.Alg.EdDSA,
            });
            expect(client.credentialOffer).toBeDefined();
            expect(client.endpointMetadata).toBeDefined();
            expect(client.getCredentialEndpoint()).toEqual(`${ISSUER_URL}/credentials`);
            expect(client.getAccessTokenEndpoint()).toEqual(`${ISSUER_URL}/token`);
            const accessToken = yield client.acquireAccessToken();
            // console.log(accessToken);
            expect(accessToken).toMatchObject({
                expires_in: 300,
                // scope: 'GuestCredential',
                token_type: 'bearer',
            });
            const credentialResponse = yield client.acquireCredentials({
                credentialTypes: 'GuestCredential',
                format,
                proofCallbacks: {
                    signCallback: proofOfPossessionCallbackFunction,
                },
            });
            expect(credentialResponse.credential).toBeDefined();
            const wrappedVC = ssi_types_1.CredentialMapper.toWrappedVerifiableCredential(credentialResponse.credential);
            expect(format.startsWith(wrappedVC.format)).toEqual(true);
        });
    }
    xit('succeed in a full flow with the client using OpenID4VCI version 11 and ldp_vc', () => __awaiter(void 0, void 0, void 0, function* () {
        yield test('ldp_vc');
    }), exports.UNIT_TEST_TIMEOUT);
    xit('succeed in a full flow with the client using OpenID4VCI version 11 and jwt_vc_json', () => __awaiter(void 0, void 0, void 0, function* () {
        yield test('jwt_vc_json');
    }), exports.UNIT_TEST_TIMEOUT);
});
function getCredentialOffer(format) {
    return __awaiter(this, void 0, void 0, function* () {
        const credentialOffer = yield (0, cross_fetch_1.fetch)('https://ssi.sphereon.com/pf3/webapp/credential-offers', {
            method: 'post',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            //make sure to serialize your JSON body
            body: JSON.stringify({
                credentials: ['GuestCredential'],
                grants: {
                    'urn:ietf:params:oauth:grant-type:pre-authorized_code': {
                        'pre-authorized_code': (0, uuid_1.v4)().substring(0, 10),
                        user_pin_required: false,
                    },
                },
                credentialDataSupplierInput: { firstName: 'Hello', lastName: 'World', email: 'hello.world@example.com' },
            }),
        });
        return (yield credentialOffer.json());
    });
}
function proofOfPossessionCallbackFunction(args, kid) {
    return __awaiter(this, void 0, void 0, function* () {
        const importedJwk = yield (0, jose_1.importJWK)(jwk, 'EdDSA');
        return yield new jose_1.SignJWT(Object.assign({}, args.payload))
            .setProtectedHeader(Object.assign(Object.assign({}, args.header), { kid: kid }))
            .setIssuer(kid)
            .setIssuedAt()
            .setExpirationTime('2h')
            .sign(importedJwk);
    });
}
describe('ismapolis bug report #63, https://github.com/Sphereon-Opensource/OID4VC-demo/issues/63, should', () => {
    it('work as expected provided a correct JWT is supplied', () => __awaiter(void 0, void 0, void 0, function* () {
        debug_1.default.enable('*');
        const { uri } = yield getCredentialOffer('jwt_vc_json');
        const client = yield __1.OpenID4VCIClient.fromURI({ uri: uri, clientId: 'test-clientID' });
        const metadata = yield client.retrieveServerMetadata();
        console.log(JSON.stringify(metadata));
        //2. Adquire acces token from authorization server endpoint
        const accessToken = yield client.acquireAccessToken({});
        console.log(`Access token: ${JSON.stringify(accessToken)}`);
        //3. Create DID needed for later proof of possession
        const { keys, didDocument } = yield didts.jwk.generate({
            type: 'secp256k1', // 'P-256', 'P-384', 'X25519', 'secp256k1'
            accept: 'application/did+json',
            secureRandom: () => {
                return crypto.randomBytes(32);
            },
        });
        const edPrivateKey = yield (0, jose_1.importJWK)(keys[0].privateKeyJwk);
        function signCallback(args, kid) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!args.payload.aud) {
                    throw Error('aud required');
                }
                else if (!kid) {
                    throw Error('kid required');
                }
                return yield new jose_1.SignJWT(Object.assign({}, args.payload))
                    .setProtectedHeader({ alg: args.header.alg, kid, typ: 'openid4vci-proof+jwt' })
                    .setIssuedAt()
                    .setIssuer(kid)
                    .setAudience(args.payload.aud)
                    .setExpirationTime('2h')
                    .sign(edPrivateKey);
            });
        }
        const callbacks = {
            signCallback: signCallback,
        };
        const credentialResponse = yield client.acquireCredentials({
            credentialTypes: 'GuestCredential',
            proofCallbacks: callbacks,
            format: 'jwt_vc_json',
            alg: oid4vci_common_1.Alg.ES256K,
            kid: didDocument.verificationMethod[0].id,
            jti: (0, uuid_1.v4)(),
        });
        console.log(JSON.stringify(credentialResponse.credential));
    }));
});
//# sourceMappingURL=SphereonE2E.spec.test.js.map