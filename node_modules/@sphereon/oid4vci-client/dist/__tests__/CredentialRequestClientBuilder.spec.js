"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const jose = __importStar(require("jose"));
const __1 = require("..");
const MetadataMocks_1 = require("./MetadataMocks");
const partialJWT = 'eyJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJkaWQ6ZXhhbXBsZTplYmZlYjFmN';
const jwt = {
    header: { alg: oid4vci_common_1.Alg.ES256, kid: 'did:example:ebfeb1f712ebc6f1c276e12ec21/keys/1', typ: 'jwt' },
    payload: { iss: 'sphereon:wallet', nonce: 'tZignsnFbp', jti: 'tZignsnFbp223', aud: MetadataMocks_1.IDENTIPROOF_ISSUER_URL },
};
const kid = 'did:example:ebfeb1f712ebc6f1c276e12ec21/keys/1';
let keypair;
beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
    const { privateKey, publicKey } = yield jose.generateKeyPair('ES256');
    keypair = { publicKey: publicKey, privateKey: privateKey };
}));
function proofOfPossessionCallbackFunction(args, kid) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!args.payload.aud) {
            throw Error('aud required');
        }
        else if (!kid) {
            throw Error('kid required');
        }
        return yield new jose.SignJWT(Object.assign({}, args.payload))
            .setProtectedHeader({ alg: 'ES256' })
            .setIssuedAt()
            .setIssuer(kid)
            .setAudience(args.payload.aud)
            .setExpirationTime('2h')
            .sign(keypair.privateKey);
    });
}
function proofOfPossessionVerifierCallbackFunction(args) {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const result = yield jose.jwtVerify(args.jwt, keypair.publicKey);
        const kid = (_a = result.protectedHeader.kid) !== null && _a !== void 0 ? _a : args.kid;
        const did = kid.split('#')[0];
        const didDocument = {};
        const alg = result.protectedHeader.alg;
        return {
            alg,
            did,
            kid,
            didDocument,
            jwt: { header: result.protectedHeader, payload: result.payload },
        };
    });
}
describe('Credential Request Client Builder', () => {
    it('should build correctly provided with correct params', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const credReqClient = (yield __1.CredentialRequestClientBuilder.fromURI({ uri: MetadataMocks_1.INITIATION_TEST_URI }))
                .withCredentialEndpoint('https://oidc4vci.demo.spruceid.com/credential')
                .withFormat('jwt_vc')
                .withCredentialType('credentialType')
                .withToken('token')
                .build();
            expect(credReqClient.credentialRequestOpts.credentialEndpoint).toBe('https://oidc4vci.demo.spruceid.com/credential');
            expect(credReqClient.credentialRequestOpts.format).toBe('jwt_vc');
            expect(credReqClient.credentialRequestOpts.credentialTypes).toStrictEqual(['credentialType']);
            expect(credReqClient.credentialRequestOpts.token).toBe('token');
        });
    });
    it('should build credential request correctly', () => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const credReqClient = (yield __1.CredentialRequestClientBuilder.fromURI({ uri: MetadataMocks_1.INITIATION_TEST_URI }))
            .withCredentialEndpoint('https://oidc4vci.demo.spruceid.com/credential')
            .withFormat('jwt_vc')
            .withCredentialType('https://imsglobal.github.io/openbadges-specification/ob_v3p0.html#OpenBadgeCredential')
            .build();
        const proof = yield __1.ProofOfPossessionBuilder.fromJwt({
            jwt,
            callbacks: {
                signCallback: proofOfPossessionCallbackFunction,
                verifyCallback: proofOfPossessionVerifierCallbackFunction,
            },
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        })
            .withClientId('sphereon:wallet')
            .withKid(kid)
            .build();
        yield proofOfPossessionVerifierCallbackFunction(Object.assign(Object.assign({}, proof), { kid }));
        const credentialRequest = yield credReqClient.createCredentialRequest({
            proofInput: proof,
            version: oid4vci_common_1.OpenId4VCIVersion.VER_1_0_08,
        });
        expect((_a = credentialRequest.proof) === null || _a === void 0 ? void 0 : _a.jwt).toContain(partialJWT);
        expect('types' in credentialRequest).toBe(true);
        if ('types' in credentialRequest) {
            expect(credentialRequest.types).toStrictEqual(['https://imsglobal.github.io/openbadges-specification/ob_v3p0.html#OpenBadgeCredential']);
        }
    }));
    it('should build correctly from metadata', () => __awaiter(void 0, void 0, void 0, function* () {
        const credReqClient = (yield __1.CredentialRequestClientBuilder.fromURI({
            uri: MetadataMocks_1.INITIATION_TEST_URI,
            metadata: MetadataMocks_1.WALT_OID4VCI_METADATA,
        }))
            .withFormat('jwt_vc')
            .build();
        expect(credReqClient.credentialRequestOpts.credentialEndpoint).toBe(`${MetadataMocks_1.WALT_ISSUER_URL}/credential`);
    }));
    it('should build correctly with endpoint from metadata', () => __awaiter(void 0, void 0, void 0, function* () {
        const credReqClient = (yield __1.CredentialRequestClientBuilder.fromURI({ uri: MetadataMocks_1.INITIATION_TEST_URI }))
            .withFormat('jwt_vc')
            .withCredentialEndpointFromMetadata(MetadataMocks_1.IDENTIPROOF_OID4VCI_METADATA)
            .build();
        expect(credReqClient.credentialRequestOpts.credentialEndpoint).toBe(`${MetadataMocks_1.IDENTIPROOF_ISSUER_URL}/credential`);
    }));
});
//# sourceMappingURL=CredentialRequestClientBuilder.spec.js.map