"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const oid4vci_common_1 = require("@sphereon/oid4vci-common");
const CredentialOfferClient_1 = require("../CredentialOfferClient");
const MetadataMocks_1 = require("./MetadataMocks");
describe('Issuance Initiation', () => {
    it('Should return Issuance Initiation Request with base URL from https URI', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(yield CredentialOfferClient_1.CredentialOfferClient.fromURI(MetadataMocks_1.INITIATION_TEST_HTTPS_URI)).toEqual({
            baseUrl: 'https://server.example.com',
            credential_offer: {
                credential_issuer: 'https://server.example.com',
                credentials: ['https://did.example.org/healthCard', 'https://did.example.org/driverLicense'],
                grants: {
                    authorization_code: {
                        issuer_state: 'eyJhbGciOiJSU0Et...FYUaBy',
                    },
                },
            },
            issuerState: 'eyJhbGciOiJSU0Et...FYUaBy',
            original_credential_offer: {
                credential_type: ['https://did.example.org/healthCard', 'https://did.example.org/driverLicense'],
                issuer: 'https://server.example.com',
                op_state: 'eyJhbGciOiJSU0Et...FYUaBy',
            },
            scheme: 'https',
            supportedFlows: ['Authorization Code Flow'],
            userPinRequired: false,
            version: 1008,
        });
    }));
    it('Should return Issuance Initiation Request with base URL from openid-initiate-issuance URI', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(yield CredentialOfferClient_1.CredentialOfferClient.fromURI(MetadataMocks_1.INITIATION_TEST_URI)).toEqual(MetadataMocks_1.INITIATION_TEST);
    }));
    it('Should return Issuance Initiation URI from request', () => __awaiter(void 0, void 0, void 0, function* () {
        expect(CredentialOfferClient_1.CredentialOfferClient.toURI(MetadataMocks_1.INITIATION_TEST)).toEqual(MetadataMocks_1.INITIATION_TEST_URI);
    }));
    it('Should return URI from Issuance Initiation Request', () => __awaiter(void 0, void 0, void 0, function* () {
        const issuanceInitiationClient = yield CredentialOfferClient_1.CredentialOfferClient.fromURI(MetadataMocks_1.INITIATION_TEST_HTTPS_URI);
        expect(CredentialOfferClient_1.CredentialOfferClient.toURI(issuanceInitiationClient)).toEqual(MetadataMocks_1.INITIATION_TEST_HTTPS_URI);
    }));
    it('Should throw error on invalid URI', () => __awaiter(void 0, void 0, void 0, function* () {
        const issuanceInitiationURI = MetadataMocks_1.INITIATION_TEST_HTTPS_URI.replace('?', '');
        yield expect(() => __awaiter(void 0, void 0, void 0, function* () { return CredentialOfferClient_1.CredentialOfferClient.fromURI(issuanceInitiationURI); })).rejects.toThrowError('Invalid Credential Offer Request');
    }));
    it('Should return Credential Offer', () => __awaiter(void 0, void 0, void 0, function* () {
        const client = yield CredentialOfferClient_1.CredentialOfferClient.fromURI('openid-credential-offer://?credential_offer=%7B%22credential_issuer%22%3A%22https%3A%2F%2Flaunchpad.vii.electron.mattrlabs.io%22%2C%22credentials%22%3A%5B%7B%22format%22%3A%22ldp_vc%22%2C%22types%22%3A%5B%22OpenBadgeCredential%22%5D%7D%5D%2C%22grants%22%3A%7B%22urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Apre-authorized_code%22%3A%7B%22pre-authorized_code%22%3A%22UPZohaodPlLBnGsqB02n2tIupCIg8nKRRUEUHWA665X%22%7D%7D%7D');
        expect(client.version).toEqual(oid4vci_common_1.OpenId4VCIVersion.VER_1_0_11);
        expect(client.baseUrl).toEqual('openid-credential-offer://');
        expect(client.scheme).toEqual('openid-credential-offer');
        expect(client.credential_offer.credential_issuer).toEqual('https://launchpad.vii.electron.mattrlabs.io');
        expect(client.preAuthorizedCode).toEqual('UPZohaodPlLBnGsqB02n2tIupCIg8nKRRUEUHWA665X');
    }));
});
//# sourceMappingURL=IssuanceInitiation.spec.js.map